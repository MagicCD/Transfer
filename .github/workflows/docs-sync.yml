name: Documentation Sync

on:
  push:
    branches: [ main ]
    paths:
      - 'README.md'
      - 'CONTRIBUTING.md'
      - 'LICENSE'
      - 'CHANGELOG.md'

jobs:
  sync-docs:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: doc_versions
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary mdformat PyGithub
          npm install -g markdownlint-cli tree-cli
      
      - name: Validate Markdown files
        run: |
          echo "Checking Markdown formatting rules..."
          npx markdownlint '**/*.md' \
            --ignore node_modules \
            --rules MD001,MD003,MD004,MD005,MD007,MD010,MD025,MD031,MD040,MD041,MD046 \
            --config .github/workflows/markdownlint.json || true
      
      - name: Generate project structure
        id: tree
        run: |
          # Generate tree excluding .git, node_modules, and other unnecessary directories
          tree -I 'node_modules|.git|dist|__pycache__|*.pyc|uploads|venv' \
               --dirsfirst -L 3 -a > project_structure.txt
          
          # Format the tree output for markdown and store in variable
          TREE_OUTPUT=$(cat project_structure.txt | sed 's/^/    /')
          
          # Save tree output to be used in wiki update step
          echo "TREE_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$TREE_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        
      - name: Prepare Wiki Content
        id: wiki_content
        run: |
          # Extract version from README.md
          VERSION=$(grep -oP 'Version \K[0-9]+\.[0-9]+\.[0-9]+' README.md | head -1)
          echo "Current version: $VERSION"
          
          # Create temp directory for wiki content
          mkdir -p wiki_content
          
          # Create Home.md with project information and structure
          cat > wiki_content/Home.md << EOL
          # LAN File Transfer Tool Wiki
          
          Welcome to the LAN File Transfer Tool documentation. This wiki is automatically synchronized with the project's README.md.
          
          ## Current Version
          
          **Version $VERSION**
          
          ## Project Structure
          
          \`\`\`
          ${{ env.TREE_OUTPUT }}
          \`\`\`
          
          ## Documentation
          
          * [Installation Guide](Installation-Guide)
          * [Usage Guide](Usage-Guide)
          * [API Documentation](API-Documentation)
          * [Contributing](Contributing)
          * [FAQ](FAQ)
          
          Last updated: $(date '+%Y-%m-%d %H:%M:%S')
          EOL
          
          # Create Installation Guide from README
          sed -n '/## Installation/,/## Usage/p' README.md | head -n -1 > wiki_content/Installation-Guide.md
          
          # Create Usage Guide from README
          sed -n '/## Usage/,/## Quick Start/p' README.md | head -n -1 > wiki_content/Usage-Guide.md
          
          # Create API Documentation from README
          sed -n '/## API Documentation/,/## Build/p' README.md | head -n -1 > wiki_content/API-Documentation.md
          
          # Create FAQ from README
          sed -n '/## FAQ/,/## Contributing/p' README.md | head -n -1 > wiki_content/FAQ.md
          
          # Copy CONTRIBUTING.md
          cp CONTRIBUTING.md wiki_content/Contributing.md
          
      - name: Track Document Versions in PostgreSQL
        run: |
          # Create schema in PostgreSQL for document versioning
          PGPASSWORD=postgres psql -h localhost -U postgres -d doc_versions -c "
            CREATE TABLE IF NOT EXISTS doc_versions (
              id SERIAL PRIMARY KEY,
              version VARCHAR(20) NOT NULL,
              commit_id VARCHAR(40) NOT NULL,
              timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              readme_hash VARCHAR(64) NOT NULL
            );
          "
          
          # Generate hash of current README
          README_HASH=$(sha256sum README.md | awk '{print $1}')
          
          # Extract version and commit ID
          VERSION=$(grep -oP 'Version \K[0-9]+\.[0-9]+\.[0-9]+' README.md | head -1)
          COMMIT_ID=$(git rev-parse HEAD)
          
          # Insert new version record
          PGPASSWORD=postgres psql -h localhost -U postgres -d doc_versions -c "
            INSERT INTO doc_versions (version, commit_id, readme_hash)
            VALUES ('$VERSION', '$COMMIT_ID', '$README_HASH');
          "

      - name: Setup GitHub App Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.DOC_SYNC_APP_ID }}
          application_private_key: ${{ secrets.DOC_SYNC_APP_PRIVATE_KEY }}
          
      - name: Push Wiki Changes
        env:
          GH_TOKEN: ${{ steps.get_workflow_token.outputs.token }}
        run: |
          # Clone wiki repository
          git config --global user.name "Documentation Bot"
          git config --global user.email "bot@example.com"
          
          git clone "https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }}.wiki.git" wiki_repo
          
          # Copy updated files to wiki repository
          cp -r wiki_content/* wiki_repo/
          
          # Commit and push changes
          cd wiki_repo
          git add .
          
          # Only commit if there are changes
          if git status | grep -q "Changes to be committed"; then
            git commit -m "Auto-update wiki from README.md - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
            echo "Wiki updated successfully!"
          else
            echo "No changes to wiki content."
          fi 